import{_ as n,o as s,c as a,a as t}from"./app-037f133e.js";const p={},e=t(`<h1 style="text-align:center;">自定义DictHooks</h1><div style="display:flex;color:#999;justify-content:space-around;"><div>作者：陈佳鑫</div><div>时间：2023-2-22</div></div><br><p>使用 hooks 将大量不频繁更新的字典数据存储在本地，减少服务器压力，在字典产生增、删、改，等操作时，对本地指定字典进行删除，在下次调用 查询接口时将最新数据存在本地，此方法存在弊端，因无法监听其他用户改变行为所以不能实现及时更新，只能通过用户刷新界面从新获取字典数据， 优点在于字典类型不存在频繁改动，可以考虑使用</p><h3 id="设计思路" tabindex="-1"><a class="header-anchor" href="#设计思路" aria-hidden="true">#</a> 设计思路</h3><p>1.我们在 dictHooks 之外定义一个对象用于存储字典类型 <br> 2.创建 dictHooks 方法入参为 <br> 3.创建 useState 用于存储本次数据 <br> 4.使用 useCallback 创建 setDict 查询字典数据方法，使用 useCallback 创建方法是为了防止多次创建影响性能 <br> 5.使用 useEffect 调用方法，调用之前先到外部对象中查询是否存在，如果存在直接取值，如果没有调用 setDict <br></p><h3 id="具体方法" tabindex="-1"><a class="header-anchor" href="#具体方法" aria-hidden="true">#</a> 具体方法</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> BaseResult <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@ahooksjs/use-request/lib/types&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token keyword">interface</span> <span class="token class-name">useDictProps</span> <span class="token punctuation">{</span>
  key<span class="token operator">:</span> <span class="token builtin">string</span>
  path<span class="token operator">?</span><span class="token operator">:</span> BaseResult<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span>
  dictValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  dictKey<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">dictDTO</span> <span class="token punctuation">{</span>
  dictKey<span class="token operator">:</span> <span class="token builtin">string</span>
  dictValue<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token comment">// 字典存储</span>
<span class="token keyword">const</span> dict<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>k<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>dictDTO<span class="token operator">&gt;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useDict</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  key<span class="token punctuation">,</span>
  path<span class="token punctuation">,</span>
  dictValue <span class="token operator">=</span> <span class="token string">&#39;dictValue&#39;</span><span class="token punctuation">,</span>
  dictKey <span class="token operator">=</span> <span class="token string">&#39;dictKey&#39;</span>
<span class="token punctuation">}</span><span class="token operator">:</span> useDictProps<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token builtin">Array</span><span class="token operator">&lt;</span>dictDTO<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token function-variable function">_setDict</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
    <span class="token function-variable function">_deleteDict</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
    <span class="token function-variable function">_emptyDict</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>useDict<span class="token punctuation">,</span> setUseDict<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">Array</span><span class="token operator">&lt;</span>dictDTO<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// 查询字典数据</span>
  <span class="token keyword">const</span> _setDict <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> path<span class="token operator">?.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> dictArr <span class="token operator">=</span> res<span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> dictKey<span class="token operator">:</span> item<span class="token punctuation">[</span>dictKey<span class="token punctuation">]</span><span class="token punctuation">,</span> dictValue<span class="token operator">:</span> item<span class="token punctuation">[</span>dictValue<span class="token punctuation">]</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> dictArr<span class="token operator">?.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token function">setUseDict</span><span class="token punctuation">(</span>dictArr<span class="token operator">?.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// 删除指定字典</span>
  <span class="token keyword">const</span> _deleteDict <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span> dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// 清空字典存储</span>
  <span class="token keyword">const</span> _emptyDict <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>keyName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">delete</span> dict<span class="token punctuation">[</span>keyName<span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">)</span> <span class="token keyword">return</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">_setDict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">setUseDict</span><span class="token punctuation">(</span>dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>useDict<span class="token punctuation">,</span> <span class="token punctuation">{</span> _setDict<span class="token punctuation">,</span> _deleteDict<span class="token punctuation">,</span> _emptyDict <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dicthooks-方法入参" tabindex="-1"><a class="header-anchor" href="#dicthooks-方法入参" aria-hidden="true">#</a> dictHooks 方法入参</h3><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">key</td><td style="text-align:left;">string</td><td style="text-align:left;">用于存储的字典名称</td></tr><tr><td style="text-align:left;">path</td><td style="text-align:left;"><code>BaseResult&lt;any, any&gt;</code></td><td style="text-align:left;">useRequest(Request, { manual: true })方法返回结果, 防止在 hooks 中使用钩子</td></tr><tr><td style="text-align:left;">dictKey</td><td style="text-align:left;">string</td><td style="text-align:left;">data 中返回的字典主键</td></tr><tr><td style="text-align:left;">dictValue</td><td style="text-align:left;">string</td><td style="text-align:left;">data 中返回的字典值</td></tr></tbody></table><h3 id="调用方式" tabindex="-1"><a class="header-anchor" href="#调用方式" aria-hidden="true">#</a> 调用方式</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useDict <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/utils/dictHooks&#39;</span>

<span class="token comment">// 用户岗位</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>userPosition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useDict</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  key<span class="token operator">:</span> <span class="token string">&#39;userPosition&#39;</span><span class="token punctuation">,</span>
  path<span class="token operator">:</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> apis<span class="token punctuation">.</span><span class="token function">userPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> manual<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  dictKey<span class="token operator">:</span> <span class="token string">&#39;postId&#39;</span><span class="token punctuation">,</span>
  dictValue<span class="token operator">:</span> <span class="token string">&#39;name&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","DictHooks.html.vue"]]);export{k as default};
